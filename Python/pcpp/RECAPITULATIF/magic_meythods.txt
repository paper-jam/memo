






# === construction initialisation
__new__
__init__
__del__

-- ===== comparison

#     __cpm__(self, other)
# ==  __eq__(self, other)
# !=  __ne__(self, other)
# <   __lt__(self, other) less than
# >   __gt__(self, other) greater than
# <=  __le__(self, other) less or equal
# >=  __ge__(self, other) greater or equal

-- ====== UNARY

# +             __pos__(self)
# -             __neg__(self)
# abs()         __abs__(self)
# round(a, b)   __round__(self, b)
# math.floor    __floor__
# math.ceil     __ceil__
# math.trunc    __trunc

# ======== bitwise
# __invert__
# __lshift__
# __rshift__
# __and__
# __or__
# __xor__

# ======= reflected operator
__radd__(self, other)
__rsub__(self, other)
__rmul__(self, other)
__rfloordiv__(self, other)
__rdiv__(self, other)
__rtruediv__


# ====== arithletic operations
# +   __add__(self, other)
# -   __sub__(self, other)
# *   __mul__(self, other)
# //  __floordiv__(self, other)
# /   __div__(self, other)
# %   __mod__(self, other)
# **  __pow__(self, other)
      __divmod__ long division with divmod() function
__truediv__ : use to divide one object by another

# ====== Augmented assignment __i ..

# +=  __iadd__(self, other)
# -=  __isub__(self, other)
# *=  __imul__(self, other)
# //= __ifloordiv__(self, other)
# /=  __idiv__(self, other)
# %=  __imod__(self, other)
# **= __ipow__(self, other)

# ======= Type conversion magic methods

#  int()   __int__(self)
#  float() __float__(self)
#  oct()   __oct__(self)
#  hex()   __hex__(self)
__complex__
__oct__
__hex__
__index)

# ====== for containers
__len__
__getitem__
__setitem__
__delitem__
__iter__
__reversed__
__contains__  in, not in
__missing__  is used in subclasses of dict

# ======= context manager
__enter__
__exit__

# ====== copy
__copy__
__deepcopy__





# ======= representing your class
# str()   __str__(self)     # is used by the print() method !
# repr()  __repr__(self)
# format()    __format__(self, formatstr)


# __str__() string is intended for users, it use by str() print() and format()
# the __repr__() string is intended for developers.

__unicode__
__nonzero__  ==> bool
__dir__     list of attributes

__instancecheck__(self, instance)       isinstance()
__subclasscheck__(self, subclass)       issubclass()

__call__        allo a class to be calles as a function






# hash()  __hash__(self)
# dir()   __dir__(self)
# bool()  __nonzero__(self)
